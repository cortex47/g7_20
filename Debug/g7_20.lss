
g7_20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000d4  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000018f  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e2  00000000  00000000  000002b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000015e  00000000  00000000  00000395  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000161  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000041  00000000  00000000  00000679  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000006ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	02 d0       	rcall	.+4      	; 0x22 <main>
  1e:	2e c0       	rjmp	.+92     	; 0x7c <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <main>:


int main(void)
{
	unsigned char repeat_counter = 0;
	DDRB = 0x00;
  22:	17 ba       	out	0x17, r1	; 23
	DDRB |= (SET_UP(PB4))|(SET_UP(PB3));
  24:	87 b3       	in	r24, 0x17	; 23
  26:	88 61       	ori	r24, 0x18	; 24
  28:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  2a:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  2c:	2f e7       	ldi	r18, 0x7F	; 127
  2e:	3f e4       	ldi	r19, 0x4F	; 79
  30:	42 e1       	ldi	r20, 0x12	; 18
  32:	21 50       	subi	r18, 0x01	; 1
  34:	30 40       	sbci	r19, 0x00	; 0
  36:	40 40       	sbci	r20, 0x00	; 0
  38:	e1 f7       	brne	.-8      	; 0x32 <main+0x10>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <main+0x1a>
  3c:	00 00       	nop
  3e:	83 e0       	ldi	r24, 0x03	; 3
    while(1)
    {
        //TODO:: Please write your application code 
		for(repeat_counter = 0; repeat_counter < REPEAT_COUNT; repeat_counter++)
		{
			PORTB = SET_UP(PB4);
  40:	90 e1       	ldi	r25, 0x10	; 16
  42:	98 bb       	out	0x18, r25	; 24
  44:	5f ef       	ldi	r21, 0xFF	; 255
  46:	2c eb       	ldi	r18, 0xBC	; 188
  48:	31 e0       	ldi	r19, 0x01	; 1
  4a:	45 e0       	ldi	r20, 0x05	; 5
  4c:	51 50       	subi	r21, 0x01	; 1
  4e:	20 40       	sbci	r18, 0x00	; 0
  50:	30 40       	sbci	r19, 0x00	; 0
  52:	40 40       	sbci	r20, 0x00	; 0
  54:	d9 f7       	brne	.-10     	; 0x4c <__SREG__+0xd>
  56:	00 c0       	rjmp	.+0      	; 0x58 <__SREG__+0x19>
  58:	00 00       	nop
			_delay_ms(420000);
			PORTB = SET_DOWN(PB4);
  5a:	18 ba       	out	0x18, r1	; 24
  5c:	5f ef       	ldi	r21, 0xFF	; 255
  5e:	2b e1       	ldi	r18, 0x1B	; 27
  60:	3e e4       	ldi	r19, 0x4E	; 78
  62:	4e e0       	ldi	r20, 0x0E	; 14
  64:	51 50       	subi	r21, 0x01	; 1
  66:	20 40       	sbci	r18, 0x00	; 0
  68:	30 40       	sbci	r19, 0x00	; 0
  6a:	40 40       	sbci	r20, 0x00	; 0
  6c:	d9 f7       	brne	.-10     	; 0x64 <__SREG__+0x25>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <__SREG__+0x31>
  70:	00 00       	nop
  72:	81 50       	subi	r24, 0x01	; 1
	_delay_ms(5000);
	
    while(1)
    {
        //TODO:: Please write your application code 
		for(repeat_counter = 0; repeat_counter < REPEAT_COUNT; repeat_counter++)
  74:	31 f7       	brne	.-52     	; 0x42 <__SREG__+0x3>
			PORTB = SET_UP(PB4);
			_delay_ms(420000);
			PORTB = SET_DOWN(PB4);
			_delay_ms(1200000);
		};
		PORTB = SET_UP(PB3);
  76:	88 e0       	ldi	r24, 0x08	; 8
  78:	88 bb       	out	0x18, r24	; 24
  7a:	ff cf       	rjmp	.-2      	; 0x7a <__SREG__+0x3b>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>
